spring.application.name=pagamentos-ms
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://${DB_HOST}/${DB_NAME}-pagamento?createDatabaseIfNotExist=true
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.jpa.show-sql=true

# Configuracoes de conexao com o RabbitMQ
# Endereco do servidor RabbitMQ
spring.rabbitmq.host=localhost
# Porta padrao do RabbitMQ
spring.rabbitmq.port=5672
# Nome de usuario para autenticacao (padrao: guest)
spring.rabbitmq.username=leonardo
# Senha para autenticacao (padrao: guest)
spring.rabbitmq.password=alura

# Habilita o registro do servico no Eureka, permitindo que ele se torne visivel para outros servicos
eureka.client.register-with-eureka=true

# Permite que o cliente busque o registro de outros servicos disponiveis no Eureka, facilitando a descoberta de servicos.
eureka.client.fetch-registry=true

# Define a URL do servidor Eureka onde o cliente ira se registrar e buscar informacoes sobre outros servicos.
eureka.client.serviceUrl.defaultZone=http://localhost:8081/eureka

# Define que o servidor deve escolher uma porta aleatoria disponivel ao iniciar, permitindo que o Eureka gerencie a atribuicao de portas para os servicos.
server.port=0

# Tamanho da janela deslizante para calcular a taxa de falhas
resilience4j.circuitbreaker.instances.atualizaPedido.slidingWindowSize= 3

# Numero minimo de chamadas que devem ser feitas antes do circuit breaker entrar em acao
resilience4j.circuitbreaker.instances.atualizaPedido.minimumNumberOfCalls= 2

# Duracao que o circuit breaker ira permanecer no estado aberto antes de tentar novamente
resilience4j.circuitbreaker.instances.atualizaPedido.waitDurationInOpenState= 50s